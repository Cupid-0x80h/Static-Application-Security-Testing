
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN IDENTIFIER INT_KEYWORD LBRACE LPAREN NUMBER RBRACE RETURN RPAREN SEMICOLON STRINGprogram : statement_liststatement_list : statement\n| statement_list statementstatement : IDENTIFIER LPAREN expression RPAREN SEMICOLONexpression : STRINGstatement : IDENTIFIER ASSIGN expression SEMICOLON\n| INT_KEYWORD IDENTIFIER ASSIGN expression SEMICOLONstatement : RETURN expression SEMICOLONexpression : NUMBER'
    
_lr_action_items = {'IDENTIFIER':([0,2,3,5,7,17,19,21,22,],[4,4,-2,10,-3,-8,-6,-4,-7,]),'INT_KEYWORD':([0,2,3,7,17,19,21,22,],[5,5,-2,-3,-8,-6,-4,-7,]),'RETURN':([0,2,3,7,17,19,21,22,],[6,6,-2,-3,-8,-6,-4,-7,]),'$end':([1,2,3,7,17,19,21,22,],[0,-1,-2,-3,-8,-6,-4,-7,]),'LPAREN':([4,],[8,]),'ASSIGN':([4,10,],[9,16,]),'STRING':([6,8,9,16,],[12,12,12,12,]),'NUMBER':([6,8,9,16,],[13,13,13,13,]),'SEMICOLON':([11,12,13,15,18,20,],[17,-5,-9,19,21,22,]),'RPAREN':([12,13,14,],[-5,-9,18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,2,],[3,7,]),'expression':([6,8,9,16,],[11,14,15,20,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program_statements','parser.py',59),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',63),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',64),
  ('statement -> IDENTIFIER LPAREN expression RPAREN SEMICOLON','statement',5,'p_statement_function_call','parser.py',78),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',84),
  ('statement -> IDENTIFIER ASSIGN expression SEMICOLON','statement',4,'p_statement_assign','parser.py',90),
  ('statement -> INT_KEYWORD IDENTIFIER ASSIGN expression SEMICOLON','statement',5,'p_statement_assign','parser.py',91),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statement_return','parser.py',103),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',111),
]
