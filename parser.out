Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LBRACE
    RBRACE

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> IDENTIFIER LPAREN expression RPAREN SEMICOLON
Rule 5     expression -> STRING
Rule 6     statement -> IDENTIFIER ASSIGN expression SEMICOLON
Rule 7     statement -> INT_KEYWORD IDENTIFIER ASSIGN expression SEMICOLON
Rule 8     statement -> RETURN expression SEMICOLON
Rule 9     expression -> NUMBER

Terminals, with rules where they appear

ASSIGN               : 6 7
IDENTIFIER           : 4 6 7
INT_KEYWORD          : 7
LBRACE               : 
LPAREN               : 4
NUMBER               : 9
RBRACE               : 
RETURN               : 8
RPAREN               : 4
SEMICOLON            : 4 6 7 8
STRING               : 5
error                : 

Nonterminals, with rules where they appear

expression           : 4 6 7 8
program              : 0
statement            : 2 3
statement_list       : 1 3

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . IDENTIFIER LPAREN expression RPAREN SEMICOLON
    (6) statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (7) statement -> . INT_KEYWORD IDENTIFIER ASSIGN expression SEMICOLON
    (8) statement -> . RETURN expression SEMICOLON

    IDENTIFIER      shift and go to state 4
    INT_KEYWORD     shift and go to state 5
    RETURN          shift and go to state 6

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . IDENTIFIER LPAREN expression RPAREN SEMICOLON
    (6) statement -> . IDENTIFIER ASSIGN expression SEMICOLON
    (7) statement -> . INT_KEYWORD IDENTIFIER ASSIGN expression SEMICOLON
    (8) statement -> . RETURN expression SEMICOLON

    $end            reduce using rule 1 (program -> statement_list .)
    IDENTIFIER      shift and go to state 4
    INT_KEYWORD     shift and go to state 5
    RETURN          shift and go to state 6

    statement                      shift and go to state 7

state 3

    (2) statement_list -> statement .

    IDENTIFIER      reduce using rule 2 (statement_list -> statement .)
    INT_KEYWORD     reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> IDENTIFIER . LPAREN expression RPAREN SEMICOLON
    (6) statement -> IDENTIFIER . ASSIGN expression SEMICOLON

    LPAREN          shift and go to state 8
    ASSIGN          shift and go to state 9


state 5

    (7) statement -> INT_KEYWORD . IDENTIFIER ASSIGN expression SEMICOLON

    IDENTIFIER      shift and go to state 10


state 6

    (8) statement -> RETURN . expression SEMICOLON
    (5) expression -> . STRING
    (9) expression -> . NUMBER

    STRING          shift and go to state 12
    NUMBER          shift and go to state 13

    expression                     shift and go to state 11

state 7

    (3) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 3 (statement_list -> statement_list statement .)
    INT_KEYWORD     reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 8

    (4) statement -> IDENTIFIER LPAREN . expression RPAREN SEMICOLON
    (5) expression -> . STRING
    (9) expression -> . NUMBER

    STRING          shift and go to state 12
    NUMBER          shift and go to state 13

    expression                     shift and go to state 14

state 9

    (6) statement -> IDENTIFIER ASSIGN . expression SEMICOLON
    (5) expression -> . STRING
    (9) expression -> . NUMBER

    STRING          shift and go to state 12
    NUMBER          shift and go to state 13

    expression                     shift and go to state 15

state 10

    (7) statement -> INT_KEYWORD IDENTIFIER . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 16


state 11

    (8) statement -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 17


state 12

    (5) expression -> STRING .

    SEMICOLON       reduce using rule 5 (expression -> STRING .)
    RPAREN          reduce using rule 5 (expression -> STRING .)


state 13

    (9) expression -> NUMBER .

    SEMICOLON       reduce using rule 9 (expression -> NUMBER .)
    RPAREN          reduce using rule 9 (expression -> NUMBER .)


state 14

    (4) statement -> IDENTIFIER LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 18


state 15

    (6) statement -> IDENTIFIER ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 19


state 16

    (7) statement -> INT_KEYWORD IDENTIFIER ASSIGN . expression SEMICOLON
    (5) expression -> . STRING
    (9) expression -> . NUMBER

    STRING          shift and go to state 12
    NUMBER          shift and go to state 13

    expression                     shift and go to state 20

state 17

    (8) statement -> RETURN expression SEMICOLON .

    IDENTIFIER      reduce using rule 8 (statement -> RETURN expression SEMICOLON .)
    INT_KEYWORD     reduce using rule 8 (statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 8 (statement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 8 (statement -> RETURN expression SEMICOLON .)


state 18

    (4) statement -> IDENTIFIER LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 21


state 19

    (6) statement -> IDENTIFIER ASSIGN expression SEMICOLON .

    IDENTIFIER      reduce using rule 6 (statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    INT_KEYWORD     reduce using rule 6 (statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 6 (statement -> IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 6 (statement -> IDENTIFIER ASSIGN expression SEMICOLON .)


state 20

    (7) statement -> INT_KEYWORD IDENTIFIER ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 22


state 21

    (4) statement -> IDENTIFIER LPAREN expression RPAREN SEMICOLON .

    IDENTIFIER      reduce using rule 4 (statement -> IDENTIFIER LPAREN expression RPAREN SEMICOLON .)
    INT_KEYWORD     reduce using rule 4 (statement -> IDENTIFIER LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 4 (statement -> IDENTIFIER LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 4 (statement -> IDENTIFIER LPAREN expression RPAREN SEMICOLON .)


state 22

    (7) statement -> INT_KEYWORD IDENTIFIER ASSIGN expression SEMICOLON .

    IDENTIFIER      reduce using rule 7 (statement -> INT_KEYWORD IDENTIFIER ASSIGN expression SEMICOLON .)
    INT_KEYWORD     reduce using rule 7 (statement -> INT_KEYWORD IDENTIFIER ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 7 (statement -> INT_KEYWORD IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 7 (statement -> INT_KEYWORD IDENTIFIER ASSIGN expression SEMICOLON .)

